import random
import numpy as np
import pandas as pd
from pandas.testing import assert_frame_equal

from src.loaders.data_loader import load_energy_efficiency_dataset
from src.transformers.data_transformer import transform_energy_efficiency_dataset, add_gaussian_noise
from tests.transformers.fixtures.fixtures import expected_features_means_df, expected_features_variances_df, expected_noisy_df

SEED = 123
np.random.seed(SEED)
random.seed(SEED)
TOL_FLOAT = 1e-06


def test_add_gaussian_noise(
        expected_noisy_df,
):
    """
    Test the function `add_gaussian_noise` to ensure it correctly adds gaussian noise to the given
    dataframe and provides the expected noisy dataframe.

    Parameters:
        expected_noisy_df (pd.DataFrame): The dataframe representing the expected noisy output to
        compare against.

    Raises:
        AssertionError: If the actual noisy dataframe generated by add_gaussian_noise does not match
        the expected dataframe within the specified tolerance.
    """
    features_df = pd.DataFrame({
        "Feature_1": [1.0, 2.0, 3.0],
        "Feature_2": [4.0, 5.0, 6.0]
    })
    actual_noisy_features_df = add_gaussian_noise(features_df)
    assert_frame_equal(
        actual_noisy_features_df,
        expected_noisy_df,
        check_exact=False,
        atol=TOL_FLOAT
    )

def test_transform_energy_efficiency_dataset(
        expected_features_means_df,
        expected_features_variances_df,
):
    """
    Tests the transformation of the energy efficiency dataset by verifying the means and
    variances of the scaled features and targets against expected values. This function
    ensures the scaling and transformations applied to the energy efficiency dataset meet
    the expectations for both original and noise-augmented datasets.

    Arguments:
        expected_features_means_df (DataFrame): The expected DataFrame of feature means
        after scaling and transformation.
        expected_features_variances_df (DataFrame): The expected DataFrame of feature
        variances after scaling and transformation.

    Raises:
        AssertionError: If the actual means or variances of the scaled datasets do not
        match the expected DataFrames within the tolerance level.

    Returns:
        None
    """
    features_df, targets_df = load_energy_efficiency_dataset()
    data = transform_energy_efficiency_dataset(
        features_df=features_df,
        targets_df=targets_df,
    )
    scaled_train_features_df = data["train"]["features"]["original"]
    scaled_test_features_df = data["test"]["features"]["original"]
    scaled_noisy_train_features_df = data["train"]["features"]["noise"]
    scaled_new_test_features_df = data["test"]["features"]["noise"]

    actual_scaled_train_features_means_df = scaled_train_features_df.mean().to_frame().T.apply(lambda x: np.floor(np.abs(x)))
    actual_scaled_test_features_means_df = scaled_test_features_df.mean().to_frame().T.apply(lambda x: np.floor(np.abs(x)))
    actual_scaled_noisy_train_features_means_df = scaled_noisy_train_features_df.mean().to_frame().T.apply(lambda x: np.floor(np.abs(x)))
    actual_scaled_new_test_features_means_df = scaled_new_test_features_df.mean().to_frame().T.apply(lambda x: np.floor(np.abs(x)))

    actual_scaled_train_features_variances_df = scaled_train_features_df.var().to_frame().T.apply(np.round)
    actual_scaled_test_features_variances_df = scaled_test_features_df.var().to_frame().T.apply(np.round)
    actual_scaled_noisy_train_features_variances_df = scaled_noisy_train_features_df.var().to_frame().T.apply(np.round)
    actual_scaled_new_test_features_variances_df = scaled_new_test_features_df.var().to_frame().T.apply(np.ceil)

    for actual_means_df in [
        actual_scaled_train_features_means_df,
        actual_scaled_test_features_means_df,
        actual_scaled_noisy_train_features_means_df,
        actual_scaled_new_test_features_means_df,
    ]:
        assert_frame_equal(
            actual_means_df,
            expected_features_means_df,
            check_exact=False,
            atol=TOL_FLOAT
        )
    for actual_variances_df in [
        actual_scaled_train_features_variances_df,
        actual_scaled_test_features_variances_df,
        actual_scaled_noisy_train_features_variances_df,
        actual_scaled_new_test_features_variances_df
    ]:
        assert_frame_equal(
            actual_variances_df,
            expected_features_variances_df,
            check_exact=False,
            atol=TOL_FLOAT
        )
    print("All tests passed!")
